//$Header
//==============================================================================
//		Author		: M. Ivanchenko
//		Date create	: 11-11-2010
//		Date update	: 20-06-2013
//		Comment		: Declaration of qt_data_row class.
//==============================================================================
#ifndef __QT_DATA_ROW_H__
#define __QT_DATA_ROW_H__

#include <QDebug>
#include <QVariant>
#include <QVector>

#include <stdexcept>

namespace espira
{

namespace db
{

//#############################################################################
//			class qt_data_row
//#############################################################################
	class qt_data_row
	{
		typedef QVector<QVariant*> data_vector;
	//=========================================================================
	//		CONSTRUCTORS/DESTRUCTOR
	//=========================================================================
	private:
		//----------------------------------------------------------------------
		qt_data_row( const qt_data_row & ); //disabled

	public:
		//----------------------------------------------------------------------
		qt_data_row( ) :
			_data( 0 )
		{ }
		//----------------------------------------------------------------------
		virtual ~qt_data_row( );

	//==========================================================================
	//		OPERATIONS
	//==========================================================================
	private:
	//--------------------------------------------------------------------------
		const qt_data_row& operator=( const qt_data_row & ); //disabled

	public:
	//--------------------------------------------------------------------------
		QVariant& operator[]( int i_column );
	//--------------------------------------------------------------------------
		friend
		QDebug operator<<( QDebug q_debug, const qt_data_row &row );

	//=========================================================================
	//		FUNCTIONS
	//=========================================================================
	public:
	//--------------------------------------------------------------------------
        int columns_count( ) const
		{
			if( !this->_data )
			{
				return 0;
			}
			return this->_data->size( );
		}
	//--------------------------------------------------------------------------
		void free( );
	//--------------------------------------------------------------------------
		void reserve( int i_count )
		{
			if( !this->_data )
			{
				this->_data = new data_vector;
			}
			this->_data->reserve( i_count );
		}
	//--------------------------------------------------------------------------
		void append( const QVariant &value );
    //--------------------------------------------------------------------------
        void append( QVariant *pval );
    //--------------------------------------------------------------------------
		void append( const QVector<QVariant> &vector );

	//==========================================================================
	//		FIELDS
	//==========================================================================
	private:
		data_vector *_data;

	};//class qt_data_row

//#############################################################################
//-----------------------------------------------------------------------------

//#############################################################################
//			class qt_data_row_collection
//#############################################################################
	class qt_data_row_collection
	{
	public:
		typedef QVector<qt_data_row *>				rows_vector;
		typedef QVector<qt_data_row *>::iterator	iterator;
	//=========================================================================
	//		CONSTRUCTORS/DESTRUCTOR
	//=========================================================================
	private:
		//----------------------------------------------------------------------
		qt_data_row_collection( const qt_data_row_collection & ); //disabled

	public:
		//----------------------------------------------------------------------
		qt_data_row_collection( ) :
			_data( 0 )
		{ }
		//----------------------------------------------------------------------
		virtual ~qt_data_row_collection( )
		{
			if( this->_data )
			{
				this->free( );
			}
		}

	//==========================================================================
	//		OPERATIONS
	//==========================================================================
	private:
	//--------------------------------------------------------------------------
		const qt_data_row_collection&
						operator=( const qt_data_row_collection & ); //disabled
	public:
	//--------------------------------------------------------------------------
		qt_data_row* operator[]( int i_row );
	//--------------------------------------------------------------------------
		friend
		QDebug operator<<( QDebug q_debug, const qt_data_row_collection &rows );

	//=========================================================================
	//		FUNCTIONS
	//=========================================================================
	public:
	//--------------------------------------------------------------------------
		iterator begin( )
		{
			if( !this->_data )
			{
				return QVector<qt_data_row *>::iterator( );
			}
			return this->_data->begin( );
		}

	//--------------------------------------------------------------------------
		iterator end( )
		{
			if( !this->_data )
			{
				return QVector<qt_data_row *>::iterator( );
			}
			return this->_data->end( );
		}

	//--------------------------------------------------------------------------
		int size( ) const
		{
			if( !this->_data )
			{
				return 0;
			}
			return this->_data->size( );
		}
	//--------------------------------------------------------------------------
		void free( );
	//--------------------------------------------------------------------------
		void append( qt_data_row *row );

	//==========================================================================
	//		FIELDS
	//==========================================================================
	private:
		rows_vector *_data;

	};

//#############################################################################
//-----------------------------------------------------------------------------
}//namespace db

}//namespace espira

#endif // __QT_DATA_ROW_H__
